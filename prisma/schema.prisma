datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  telegramId             Int              @unique
  username               String?
  firstName              String?
  lastName               String?
  points                 Int              @default(0)
  hasClaimedWelcomePoints Boolean          @default(false)
  isNewUser              Boolean          @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  dailyPlays             Int              @default(0)
  lastPlayedDate         DateTime?
  walletAddress          String?          // Store connected TON wallet address
  isWalletConnected      Boolean          @default(false)
  transactions           Transaction[]
  taskCompletions        TaskCompletion[] // Relation to track task completions

  // Referrals
  referrals               User[]           @relation("UserReferrals")
  referredBy              User?            @relation("UserReferrals", fields: [referredByTelegramId], references: [telegramId], onDelete: NoAction, onUpdate: NoAction)
  referredByTelegramId    Int?             // Store referrerâ€™s telegramId
}

model Task {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  points    Int
  completed Boolean       @default(false)
  users     TaskCompletion[] // Relation for many-to-many
}

model TaskCompletion {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier
  userId    String   // Reference to User
  taskId    String   // Reference to Task
  completed DateTime @default(now()) // Timestamp of when the task was completed

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId]) // Ensure a user can only complete a task once
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   // Reference to User
  amount    Float    // TON amount
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}